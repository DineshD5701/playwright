# Test info

- Name: Bigbasket MoreTickets Test
- Location: /app/tests/bigbasket-tests/08_BigbasketMoreTickets.spec.js:7:5

# Error details

```
Error: page.click: Test ended.
Call log:
  - waiting for locator('//button[@datatracking="PAST_TICKET"]')
    - locator resolved to <button role="tab" tabindex="-1" type="button" aria-selected="false" data-tabkeys="PAST_TICKET" datatracking="PAST_TICKET" class="MuiButtonBase-root MuiTab-root jss829 MuiTab-textColorInherit text-cyan-500">â€¦</button>

    at ElementClass.waitAndClick (/app/Generic/ElemenetClass.js:34:28)
    at TicketDetailsPage.doMoreTicketsTab (/app/Pages/TicketDetailsPage.js:135:29)
    at /app/tests/bigbasket-tests/08_BigbasketMoreTickets.spec.js:15:21
```

# Test source

```ts
   1 | import { expect } from "@playwright/test";
   2 | import BaseClass from "../Generic/BaseClass";
   3 |
   4 | class ElementClass {
   5 |   constructor(page) {
   6 |     this.page = page;
   7 |   }
   8 |
   9 |   async open(url) {
   10 |     return await this.page.goto(url);
   11 |   }
   12 |
   13 |   async getTitle() {
   14 |     return await this.page.title();
   15 |   }
   16 |
   17 |   async pause() {
   18 |     return await this.page.pause();
   19 |   }
   20 |
   21 |   async getUrl() {
   22 |     return this.page.url();
   23 |   }
   24 |
   25 |   async wait(time) {
   26 |     return this.page.waitForTimeout(time);
   27 |   }
   28 |
   29 |   async waitForPageLoad() {
   30 |     return await this.page.waitForLoadState("domcontentloaded");
   31 |   }
   32 |
   33 |   async waitAndClick(selector) {
>  34 |     return await this.page.click(selector);
      |                            ^ Error: page.click: Test ended.
   35 |   }
   36 |
   37 |   async waitAndHardClick(selector) {
   38 |     return await this.page.$eval(selector, (element) => element.click());
   39 |   }
   40 |
   41 |   async waitAndFill(selector, text) {
   42 |     return await this.page.fill(selector, text);
   43 |   }
   44 |
   45 |   async keyPress(selector, key) {
   46 |     return await this.page.press(selector, key);
   47 |   }
   48 |
   49 |   async takeScreenShot() {
   50 |     return expect(await this.page.screenshot()).toMatchSnapshot(
   51 |       "MyScreenShot.png"
   52 |     );
   53 |   }
   54 |
   55 |   async verifyElementText(selector, text) {
   56 |     const textValue = await this.page.textContent(selector);
   57 |     return expect(textValue.trim()).toBe(text);
   58 |   }
   59 |
   60 |   async verifyElementContainsText(selector, text) {
   61 |     const locatorText = await this.page.locator(selector);
   62 |     return await expect(locatorText).toContainText(text);
   63 |   }
   64 |
   65 |   async verifyJSElementValue(selector, text) {
   66 |     const textValue = await this.page.$eval(
   67 |       selector,
   68 |       (element) => element.value
   69 |     );
   70 |     return expect(textValue.trim()).toBe(text);
   71 |   }
   72 |
   73 |   async OLDselectValueFromDropdown(selector, text) {
   74 |     const dropdown = await this.page.locator(selector);
   75 |     return await dropdown.selectOption({ value: text });
   76 |   }
   77 |
   78 |   async doDropdownHandler(dropdownSelector, dropDownOptionElement) {
   79 |     console.log("Dropdown Selector:", dropdownSelector);
   80 |     console.log("Option Selector:", dropDownOptionElement);
   81 |
   82 |     // Step 1: Locate and click the dropdown to open it
   83 |     await dropdownSelector.click();
   84 |
   85 |     // Step 2: Locate the desired option by text
   86 |     await dropDownOptionElement.click();
   87 |   }
   88 |
   89 |   async verifyElementAttribute(selector, attribute, value) {
   90 |     const textValue = await this.page.getAttribute(selector, attribute);
   91 |     return expect(textValue.trim()).toBe(value);
   92 |   }
   93 |
   94 |   async getFirstElementFromTheList(selector) {
   95 |     const rows = await this.page.locator(selector);
   96 |     const count = await rows.count();
   97 |     for (let i = 0; i < count; ++i) {
   98 |       const firstItem = await rows.nth(0).textContent();
   99 |       return firstItem;
  100 |     }
  101 |   }
  102 |
  103 |   async getLastElementFromTheList(selector) {
  104 |     const rows = await this.page.locator(selector);
  105 |     const count = await rows.count();
  106 |     for (let i = 0; i < count; ++i) {
  107 |       const lastItem = await rows.nth(5).textContent();
  108 |       return lastItem;
  109 |     }
  110 |   }
  111 |
  112 |   async clickAllElements(selector) {
  113 |     const rows = await this.page.locator(selector);
  114 |     const count = 2;
  115 |     for (let i = 0; i < count; ++i) {
  116 |       await rows.nth(i).click();
  117 |     }
  118 |   }
  119 |
  120 |   async clickAllLinksInNewTabs(selector) {
  121 |     const rows = this.page.locator(selector);
  122 |     const count = rows.count();
  123 |     for (i in range(count)) {
  124 |       await rows.nth(i).click((modifiers = ["Control", "Shift"]));
  125 |     }
  126 |   }
  127 |
  128 |   async isElementVisible(selector, errorMessage) {
  129 |     const element = this.page.locator(selector);
  130 |     try {
  131 |       const isVisible = await element.isVisible();
  132 |       expect(isVisible).toBeTruthy();
  133 |     } catch (error) {
  134 |       throw new Error(`${errorMessage}`);
```